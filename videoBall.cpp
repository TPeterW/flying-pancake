/*
 * Joey Button
 * Felix Wang
 * Peter Wang
 */

#include <stdio.h>
#include <opencv2/video/background_segm.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/opencv.hpp"
#include "physics.h"

using namespace cv;
using namespace std;

const char *win = "video";

int main(void)
{
    int cam = 0; // default camera
    VideoCapture cap(cam);
    if (!cap.isOpened()) {
        fprintf(stderr, "cannot open camera %d\n", cam);
        exit(1);
    }

    namedWindow(win, CV_WINDOW_AUTOSIZE);

    Mat fgMaskMOG;          // foreground mask generated by MOG method
    Mat inputFrame, outFrame;
    Mat circ, flipped, colored;
    Point pt;               // center of the ball

    BackgroundSubtractorMOG2 MOG;

    pt.x = 500;
    pt.y = 0;

    Point momentum;
    momentum.x = 10;
    momentum.y = 50;

    cap >> inputFrame;
    cvtColor(inputFrame, outFrame, CV_LOAD_IMAGE_COLOR);
    cvtColor(inputFrame, circ, CV_BGR2GRAY);

    int height = inputFrame.rows - 2 * RADIUS;
    int width = inputFrame.cols - 2 * RADIUS;

    // double overlap;
    int count = 0;
    int sum;
    Point small;
    Mat ballFrame, handFrame;
    Mat foregroundMask, backgroundMask;

    while (++count) {
        cap >> inputFrame;

        calcDir(&momentum, &pt, height, width);

        MOG(inputFrame, fgMaskMOG);

        // blank canvas
        circ.setTo(Scalar(0,0,0));

        Rect ballRegion(pt.x - RADIUS, pt.y - RADIUS, 2 * RADIUS, 2 * RADIUS);
        ballFrame = circ(ballRegion);

        foregroundMask = fgMaskMOG > THRESH;         // have to put here otherwise floating point exception
        backgroundMask = fgMaskMOG <= THRESH;
        // fgMaskMOG.setTo(Scalar(255, 255, 255), foregroundMask);     // clean up
        fgMaskMOG.setTo(Scalar(0, 0, 0), backgroundMask);
        handFrame = fgMaskMOG(ballRegion);                          // cut to small size

        int halfRad = RADIUS / 2;
        // top left
        small.x = halfRad;    small.y = halfRad;
        sum = getOverlap(&ballFrame, &handFrame, &small);
        momentum.x += sum;              momentum.y += sum;

        // top right
        small.x = 3 * halfRad;   small.y = halfRad;
        sum = getOverlap(&ballFrame, &handFrame, &small);
        momentum.x -= sum;              momentum.y += sum;


        // bottom left
        small.x = halfRad;    small.y = 3 * halfRad;
        sum = getOverlap(&ballFrame, &handFrame, &small);
        momentum.x += sum;              momentum.y -= sum/3;

        // bottom right
        small.x = 3 * halfRad;   small.y = 3 * halfRad;
        sum = getOverlap(&ballFrame, &handFrame, &small);
        momentum.x -= sum;              momentum.y -= sum/3;

        // EVERYTHING BELOW THIS LINE SHOULD BE DRAWING THE outFrame
        outFrame.setTo(Scalar(0,0,0));      // set all of outFrame to be black
        outFrame.setTo(Scalar(255 , 255, 255), foregroundMask);

        // applyColorMap(foregroundMask, colored, 1);
        //
        // addWeighted(inputFrame, 0.75, colored, 0.25, 0.0, inputFrame);

        drawCircle(inputFrame, pt, RADIUS,Scalar(255,0,255));

        flip(inputFrame, flipped, 1);

        imshow(win, flipped);
        if (count%30 == 0){
          printf("m.x: %d\tm.y: %d\n",momentum.x,momentum.y);
        }
        if (waitKey(1) >= 0)        // listening for key press
	        break;
    }

    return 0;
}
